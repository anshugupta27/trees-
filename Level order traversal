 Level order traversal 

void levelOrder(struct Node* node);

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};

void levelOrder(struct Node* node);


void inOrder(struct Node* node)
{
  if (node == NULL)
    return;

  inOrder(node->left);
  printf("%d ", node->data);

  inOrder(node->right);
}



int main()
{
  int t;
  struct Node *child;
  scanf("%d\n", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d",&n);
     struct Node *node = NULL;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);

        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (node == NULL)
             node = parent;
        }
        else
           parent = m[n1];

        child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }

     levelOrder(node);
     cout << endl;
  }
  return 0;
}



void levelOrder(Node* node)
{
  queue<Node*>q;
  if(node==NULL)
  return;
  
  q.push(node);
  while(!q.empty())
  {    
  Node*current=q.front();
  cout<<current->data<<" ";
  if(current->left!=NULL)
  q.push(current->left);
  if(current->right!=NULL)
  q.push(current->right);
  q.pop();
  }
  
}

 Mirror Tree 



#include <bits/stdc++.h>
using namespace std;


struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

   
    Node *root = new Node(stoi(ip[0]));

    queue<Node *> queue;
    queue.push(root);
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        Node *currNode = queue.front();
        queue.pop();

       
        string currVal = ip[i];

        if (currVal != "N") {

        
            currNode->left = new Node(stoi(currVal));

         
            queue.push(currNode->left);
        }

        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

       
        if (currVal != "N") {

           
            currNode->right = new Node(stoi(currVal));

            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

void mirror(struct Node* node);

void inOrder(struct Node* node)
{
  if (node == NULL)
    return;

  inOrder(node->left);
  printf("%d ", node->data);

  inOrder(node->right);
}







void mirror(Node* node) 
{
    if(node == NULL)
    return ;
     Node * temp = new Node(0) ;
     temp = node -> right ;
     node -> right = node -> left ;
     node -> left = temp ;
     
     mirror(node -> left ) ;
     mirror(node -> right ) ;
}

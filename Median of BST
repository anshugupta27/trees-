https://practice.geeksforgeeks.org/problems/median-of-bst/1

Given a Binary Search Tree of size N, your task is to complete the function findMedian(), which returns the median of Binary Search Tree.
Median of the BST are:

    If number of nodes are even: then median = (n/2th node + (n/2)+1 th node)/2
    If number of nodes are odd : then median = (n+1)/2th node.
    
    
    
    
    
    void findMedianUtil (struct Node *root , vector < int > &v )
{
      if ( root == NULL )
      return  ;
      findMedianUtil ( root -> left , v ) ;
      v.push_back ( root -> data ) ;
      findMedianUtil ( root -> right , v ) ;
      
}




float findMedian(struct Node *root)
{
      vector < int > v ;
      findMedianUtil ( root , v ) ;
      if ( v.size() % 2 == 0  )
      {
          int l = v.size() ;
          int a = l/2 ;
          float sum = ((float( v[a-1] + v[a] ) )/ 2) ; 
          return sum ;
       
      }
      else
      {
          int l = v.size() ;
          int a = ( l + 1 ) / 2 ;
          float sum = v[a-1] ;
          return sum ;
      }
      
}
    
    
    
    
    

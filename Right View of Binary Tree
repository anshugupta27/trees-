 Right View of Binary Tree

#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

void rightView(struct Node *root);


Node* buildTree(string str)
{
    
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

  
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

   
    Node* root = newNode(stoi(ip[0]));

    queue<Node*> queue;
    queue.push(root);

    int i = 1;
    while(!queue.empty() && i < ip.size()) {

       
        Node* currNode = queue.front();
        queue.pop();

       
        string currVal = ip[i];

        
        if(currVal != "N") {

          
            currNode->left = newNode(stoi(currVal));

         
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
        
        if(currVal != "N") {

            currNode->right = newNode(stoi(currVal));

       
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


int main() {
    int t;
    string  tc;
    getline(cin,tc);
    t=stoi(tc);
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);

        rightView(root);
        cout << endl;
    }
    return 0;
}


void rightViewUtil( Node*root , int level , int *max_level )
{
    if ( root == NULL )
    return ;
    
    if ( *max_level < level )
    {
        cout << root -> data << " " ;
        *max_level = level ;
    }
    
    rightViewUtil( root -> right , level + 1 , max_level ) ;
    rightViewUtil( root -> left , level + 1 , max_level ) ;
}




void rightView(Node *root)
{
   int max_level = 0 ;
   rightViewUtil( root , 1 , &max_level ) ;
}

